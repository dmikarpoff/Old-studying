#include "../include/utils.hpp"
#include <fstream>
#include "../include/flandmark_detector.h"
#include <sstream>
#include <opencv2/highgui/highgui.hpp>
#include <iostream>

using namespace cv;

double dist(Rect r1, Rect r2)
{
    auto sqr = [](double _n) { return _n*_n; };
    return sqrt(sqr(r1.x-r2.x) + sqr(r1.y-r2.y));
}

Mat align(const Mat& img_, Rect face, bool test)
{
    FLANDMARK_Model * flandmod;
    flandmod = flandmark_init("flandmark_model.dat");
    double* landmarks = (double*)malloc(2*flandmod->data.options.M*sizeof(float));
    Mat img = img_.clone();
    Mat im = img_.clone();
    //  equalizeHist(img_, img);
    int bbox[] = {face.x, face.y, face.x+face.width, face.y+face.height};
    IplImage oldpro = img;
    IplImage * o = &oldpro;
    int param = 0;
    flandmark_detect(o, bbox, flandmod, landmarks, &param);
    circle(im, Point((int)landmarks[0], (int)landmarks[1]), 3, Scalar(0, 0, 255));
    for (int ir = 2; ir < 2*flandmod->data.options.M; ir += 2)
        circle(im, Point(int(landmarks[ir]), int(landmarks[ir+1])), 3, Scalar(255,0,0), CV_FILLED);

    Point2f left_eye(std::fabs(landmarks[2] - std::fabs(landmarks[2] - landmarks[10]) / 2),
            std::min(landmarks[3], landmarks[11]) + std::fabs(landmarks[3] - landmarks[11]) / 2);

    Point2f right_eye(std::fabs(landmarks[4] + std::fabs(landmarks[4] - landmarks[12]) / 2),
            std::min(landmarks[5], landmarks[13]) + std::fabs(landmarks[5] - landmarks[13]) / 2);

    Point2f mouth(std::fabs(landmarks[6] + std::fabs(landmarks[6] - landmarks[8]) / 2),
            std::min(landmarks[9], landmarks[7]) + std::fabs(landmarks[7] - landmarks[9]) / 2);

    circle(im, left_eye, 3, Scalar(0,255,0), CV_FILLED);
    circle(im, right_eye, 3, Scalar(0,255,0), CV_FILLED);
    circle(im, mouth, 3, Scalar(0,255,0), CV_FILLED);

    Point2f src_tri[4];
    Point2f dst_tri[4];

    src_tri[0] = left_eye - Point2f(face.x, face.y);
    src_tri[1] = right_eye - Point2f(face.x, face.y);
    src_tri[2] = mouth - Point2f(face.x, face.y);

    dst_tri[0] = left_eye - Point2f(face.x, face.y);
    dst_tri[1] = Point2f(left_eye.x + (right_eye.x - left_eye.x), left_eye.y) - Point2f(face.x, face.y);
    dst_tri[2] = Point2f(left_eye.x + (right_eye.x - left_eye.x) / 2, mouth.y) - Point2f(face.x, face.y);

    Mat warp_mat(2, 3, CV_32FC1);
    warp_mat = getAffineTransform(src_tri, dst_tri);

    Mat dst = img.clone();
    warpAffine(img, dst, warp_mat, dst.size());

    resize(dst, dst, Size(120, 120));
    dst = dst(Rect(20, 30, 80, 80));
    return dst.clone();
}

void read_csv(vector<Triple>& triples, char separator) 
{

    String filename = "csv.txt";
    std::ifstream file(filename.c_str(), std::ifstream::in);
    String face_cascade_name = "lbpcascade_frontalface.xml";
    CascadeClassifier face_cascade;

    if( !face_cascade.load( face_cascade_name ) ){ printf("--(!)Error loading\n"); return; };
 
    if (!file) 
    {
        string error_message = "No valid input file was given, please check the given filename.";
        CV_Error(CV_StsBadArg, error_message);
    }
    std::cout << "Path loaded successfully" << std::endl;
    string line, path, classlabel;
    int k = 0;
    while (getline(file, line)) 
    {
        std::stringstream liness(line);
        getline(liness, path, separator);
        getline(liness, classlabel);
        if(!path.empty() && !classlabel.empty()) 
        {
            std::vector<Rect> face(0);
            Mat frame_gray = imread(path, 0);
			std::cout << path << std::endl;
            if (!frame_gray.empty())
            {
                face_cascade.detectMultiScale( frame_gray, face, 1.1, 7, 0, Size(80, 80) );

                if (face.size() == 1)
                {
                    Mat faceROI = frame_gray(face[0]);
                    resize(faceROI, faceROI, Size(120, 120));
                    faceROI = faceROI(Rect(20, 30, 80, 80));

                  //  faceROI = align(frame_gray, face[0], false);
                    triples.push_back(Triple(faceROI, k, atoi(classlabel.c_str())));
                    k++;
                }
            }
			else
			{
				std::cout << "Error while loading image" << std::endl;
			}
        }
    }
}

void help()
{
    std::cout << "Usage: " << std::endl;
    std::cout << "-l file.txt - learns classifier, serializes to file" << std::endl;
    std::cout << "-o file.txt - runs recognizer with file for cv-5 test" << std::endl;
    std::cout << "-c file.txt - runs recognizer with file from camera" << std::endl;
    std::cout << "-p file.txt img.jpg - runs recognizer with file for img.jpg" << std::endl;
}
