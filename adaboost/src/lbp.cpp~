#include <iostream>
#include <algorithm>
#include <cstdlib>
#include <cstdio>
#include "lbp.hpp"
#include <opencv2/imgproc/imgproc.hpp>
#include <opencv2/highgui/highgui.hpp>

//------------------------------------------------------------------------------
// LBPH
//------------------------------------------------------------------------------

using std::vector;
using cv::Mat;

//------------------------------------------------------------------------------
// cv::elbp
//------------------------------------------------------------------------------
template <typename _Tp> 
void elbp_(InputArray _src, OutputArray _dst, int radius, int neighbors) 
{
  //get matrices
  Mat src = _src.getMat();
  // allocate memory for result
  _dst.create(src.rows-2*radius, src.cols-2*radius, CV_32SC1);
  Mat dst = _dst.getMat();
  // zero
  dst.setTo(0);
  for(int n=0; n<neighbors; n++) {
    // sample points
    float x = static_cast<float>(-radius * sin(2.0*CV_PI*n/static_cast<float>(neighbors)));
    float y = static_cast<float>(radius * cos(2.0*CV_PI*n/static_cast<float>(neighbors)));
    // relative indices
    int fx = static_cast<int>(floor(x));
    int fy = static_cast<int>(floor(y));
    int cx = static_cast<int>(ceil(x));
    int cy = static_cast<int>(ceil(y));
    // fractional part
    float ty = y - fy;
    float tx = x - fx;
    // set interpolation weights
    float w1 = (1 - tx) * (1 - ty);
    float w2 =      tx  * (1 - ty);
    float w3 = (1 - tx) *      ty;
    float w4 =      tx  *      ty;
    // iterate through your data
    for(int i=radius; i < src.rows-radius;i++) {
      for(int j=radius;j < src.cols-radius;j++) {
        // calculate interpolated value
        float t = static_cast<float>(w1*src.at<_Tp>(i+fy,j+fx) + w2*src.at<_Tp>(i+fy,j+cx) + w3*src.at<_Tp>(i+cy,j+fx) + w4*src.at<_Tp>(i+cy,j+cx));
        // floating point precision, so check some machine-dependent epsilon
        dst.at<int>(i-radius,j-radius) += ((t > src.at<_Tp>(i,j)) || (std::abs(t-src.at<_Tp>(i,j)) < std::numeric_limits<float>::epsilon())) << n;
      }
    }
  }
}

void elbp(InputArray src, OutputArray dst, int radius, int neighbors)
{
  switch (src.type()) {
    case CV_8SC1:   elbp_<char>(src,dst, radius, neighbors); break;
    case CV_8UC1:   elbp_<unsigned char>(src, dst, radius, neighbors); break;
    case CV_16SC1:  elbp_<short>(src,dst, radius, neighbors); break;
    case CV_16UC1:  elbp_<unsigned short>(src,dst, radius, neighbors); break;
    case CV_32SC1:  elbp_<int>(src,dst, radius, neighbors); break;
    case CV_32FC1:  elbp_<float>(src,dst, radius, neighbors); break;
    case CV_64FC1:  elbp_<double>(src,dst, radius, neighbors); break;
    default: break;
  }
}

Mat histc_(const Mat& src, int minVal=0, int maxVal=255, bool normed=false)
{
  Mat result;
  // Establish the number of bins.
  int histSize = maxVal-minVal+1;

  Mat mask(src.rows, src.cols, CV_8U);
  int nonUniform = getUniformMask(src, mask);
  // Set the ranges.
  float range[] = { static_cast<float>(minVal), static_cast<float>(maxVal+1)};//(src.rows * src.cols) };//static_cast<float>(maxVal+1) };
  const float* histRange = { range };
  // calc histogram
  calcHist(&src, 1, 0, mask, result, 1, &histSize, &histRange, true, false);
//  result.at<float>(0, maxVal) = (float)nonUniform;
  //std::cout << nonUniform << std::endl;
  // normalize
  if(normed) {
    result /= (int)src.total() - nonUniform;
  }
  return result.reshape(1,1);
}

Mat histc(InputArray _src, int minVal, int maxVal, bool normed)
{
  Mat src = _src.getMat();
  switch (src.type()) {
    case CV_8SC1:
      return histc_(Mat_<float>(src), minVal, maxVal, normed);
      break;
    case CV_8UC1:
      return histc_(src, minVal, maxVal, normed);
      break;
    case CV_16SC1:
      return histc_(Mat_<float>(src), minVal, maxVal, normed);
      break;
    case CV_16UC1:
      return histc_(src, minVal, maxVal, normed);
      break;
    case CV_32SC1:
      return histc_(Mat_<float>(src), minVal, maxVal, normed);
      break;
    case CV_32FC1:
      return histc_(src, minVal, maxVal, normed);
      break;
    default:
      CV_Error(CV_StsUnmatchedFormats, "This type is not implemented yet."); break;
  }
  return Mat();
}

Mat spatial_histogram(InputArray _src, int numPatterns, int grid_x, int grid_y, bool /*normed*/)
{
  Mat src = _src.getMat();
  // calculate LBP patch size
  int width = src.cols/grid_x;
  int height = src.rows/grid_y;
  // allocate memory for the spatial histogram
  Mat result = Mat::zeros(grid_x * grid_y, numPatterns, CV_32FC1);
  // return matrix with zeros if no data was given
  if(src.empty())
    return result.reshape(1,1);
  // initial result_row
  int resultRowIdx = 0;
  // iterate through grid
  for(int i = 0; i < grid_y; i++) {
    for(int j = 0; j < grid_x; j++) {
      Mat src_cell = Mat(src, Range(i*height,(i+1)*height), Range(j*width,(j+1)*width));
      Mat cell_hist = histc(src_cell, 0, (numPatterns-1), true);
      // copy to the result matrix
      Mat result_row = result.row(resultRowIdx);
      cell_hist.reshape(1,1).convertTo(result_row, CV_32FC1);
      // increase row count in result matrix
      resultRowIdx++;
    }
  }
  //  drawHist(result, 64*59);
  // return result as reshaped feature vector
  return result.reshape(1,1);
}

//------------------------------------------------------------------------------
// wrapper to cv::elbp (extended local binary patterns)
//------------------------------------------------------------------------------

Mat elbp(InputArray src, int radius, int neighbors) 
{
  Mat dst;
  elbp(src, dst, radius, neighbors);
  return dst;
}

bool isUniform(uint x)
{
  if (stupidNumOfTr(x) <= 2)
    return true;
  return false;
}

uint calcNumOfUniform(uint numOfPatterns)
{
  uint result = 1;
  for (uint i = 0; i < numOfPatterns; i++)
    if (isUniform(i))
      result++;
  return result;
}

int stupidNumOfTr(uint x)
{
  int prev;
  int curr;
  int counter = 0;
  if (x % 2 == 1)
    prev = 1;
  else prev = 0;
  for (int i = 0; i < 7; i++)
  {
    x >>= 1;
    if (x % 2 == 1)
      curr = 1;
    else curr = 0;
    if (prev != curr)
      counter++;
    prev = curr;
  }
  return counter;
}

void drawHist(const Mat& hist, int histSize, string name)
{
  int hist_w = 500; int hist_h = 400;
  int bin_w = cvRound( (double) hist_w/histSize );

  bin_w = 1;
  //  std::cout << hist;
  Mat histImage( hist_h, hist_w, CV_8UC3, Scalar( 255,255,255) );
  Mat out;

  /// Normalize the result to [ 0, histImage.rows ]
  cv::normalize(hist, out, 0, histImage.rows, NORM_MINMAX, -1, Mat() );

  for( int i = 1; i <= histSize; i++ )
  {
    line( histImage, Point( bin_w*(i), hist_h) ,
        Point( bin_w*(i), hist_h - cvRound(out.at<float>(i-1)) ),
        Scalar( 0, 0, 0), bin_w, 8, 0  );
  }
  
  imshow(name, histImage);
  //  waitKey(0);
}

int getUniformMask(const Mat& img, Mat & res)
{
  int nonUniform = 0;
  for (int i = 0; i < img.rows; i++)
    for (int j = 0; j < img.cols; j++)
      if (isUniform((uint)img.at<uchar>(i, j)))
        res.at<uchar>(i, j) = 1;
      else 
      {
        res.at<uchar>(i, j) = 0; 
        nonUniform++;
      }
  return nonUniform;
}

